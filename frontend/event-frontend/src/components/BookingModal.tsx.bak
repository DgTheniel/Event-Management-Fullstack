import React from "react";
import * as Dialog from "@radix-ui/react-dialog";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";

const bookingSchema = z.object({
  attendee_name: z.string().min(2, "Name must be at least 2 characters"),
  email: z.string().email("Invalid email address"),
  tickets: z.number().min(1, "At least 1 ticket").max(10, "Max 10 tickets"),
});

type BookingForm = z.infer<typeof bookingSchema>;

interface BookingModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSubmit?: (data: BookingForm) => Promise<void> | void;
}

export default function BookingModal({ isOpen, onClose, onSubmit }: BookingModalProps) {
  const {
    register,
    handleSubmit,
    formState: { errors, isSubmitting },
    reset,
  } = useForm<BookingForm>({
    resolver: zodResolver(bookingSchema),
    defaultValues: { attendee_name: "", email: "", tickets: 1 },
  });

  const submitHandler = async (data: BookingForm) => {
    try {
      if (onSubmit) {
        await onSubmit(data);
      } else {
        // safe fallback if parent didn't provide a handler
        console.log("Booking data (no onSubmit handler provided):", data);
      }
      // success: close modal and reset form
      reset();
      onClose();
    } catch (err) {
      console.error("Booking failed", err);
      // optionally surface a user-facing error here
      alert("Booking failed. Check console for details.");
    }
  };

  // Handle the open change event from Radix: call onClose only when open === false
  const handleOpenChange = (open: boolean) => {
    if (!open) onClose();
  };

  return (
    <Dialog.Root open={isOpen} onOpenChange={handleOpenChange}>
      <Dialog.Portal>
        <Dialog.Overlay className="fixed inset-0 bg-black bg-opacity-50" />
        <Dialog.Content
          className="fixed top-1/2 left-1/2 max-w-md w-full p-6 bg-white rounded-lg shadow-lg transform -translate-x-1/2 -translate-y-1/2"
          aria-modal="true"
          role="dialog"
          aria-labelledby="booking-dialog-title"
        >
          <Dialog.Title id="booking-dialog-title" className="text-lg font-bold mb-4">
            Book Tickets
          </Dialog.Title>

          <form onSubmit={handleSubmit(submitHandler)} className="space-y-4">
            <div>
              <label htmlFor="attendee_name" className="block mb-1 font-medium">
                Name
              </label>
              <input
                id="attendee_name"
                {...register("attendee_name")}
                type="text"
                className="input-field w-full border px-3 py-2 rounded"
                aria-invalid={errors.attendee_name ? "true" : "false"}
              />
              {errors.attendee_name && (
                <p role="alert" className="text-red-600 text-sm mt-1">
                  {errors.attendee_name.message}
                </p>
              )}
            </div>

            <div>
              <label htmlFor="email" className="block mb-1 font-medium">
                Email
              </label>
              <input
                id="email"
                {...register("email")}
                type="email"
                className="input-field w-full border px-3 py-2 rounded"
                aria-invalid={errors.email ? "true" : "false"}
              />
              {errors.email && (
                <p role="alert" className="text-red-600 text-sm mt-1">
                  {errors.email.message}
                </p>
              )}
            </div>

            <div>
              <label htmlFor="tickets" className="block mb-1 font-medium">
                Number of Tickets
              </label>
              <input
                id="tickets"
                {...register("tickets", { valueAsNumber: true })}
                type="number"
                min={1}
                max={10}
                className="input-field w-24 border px-3 py-2 rounded"
                aria-invalid={errors.tickets ? "true" : "false"}
              />
              {errors.tickets && (
                <p role="alert" className="text-red-600 text-sm mt-1">
                  {errors.tickets.message}
                </p>
              )}
            </div>

            <div className="flex justify-end space-x-2 pt-4">
              <Dialog.Close asChild>
                <button
                  type="button"
                  className="px-4 py-2 border rounded hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-managementAccent"
                >
                  Cancel
                </button>
              </Dialog.Close>
              <button
                type="submit"
                disabled={isSubmitting}
                className="px-4 py-2 bg-publicPrimary text-white rounded hover:bg-red-700 disabled:opacity-50"
              >
                {isSubmitting ? "Booking..." : "Book Now"}
              </button>
            </div>
          </form>

          <Dialog.Close asChild>
            <button
              aria-label="Close"
              className="absolute top-4 right-4 text-gray-500 hover:text-gray-700"
            >
              Ã—
            </button>
          </Dialog.Close>
        </Dialog.Content>
      </Dialog.Portal>
    </Dialog.Root>
  );
}
